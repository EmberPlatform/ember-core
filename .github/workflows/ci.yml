name: Ember Core CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: release

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [debug, release, asan]
        include:
          - os: ubuntu-latest
            install_deps: sudo apt-get update && sudo apt-get install -y build-essential libreadline-dev libssl-dev libcurl4-openssl-dev pkg-config
          - os: macos-latest
            install_deps: brew install readline openssl curl pkg-config

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: ${{ matrix.install_deps }}

    - name: Configure build type
      run: |
        echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV

    - name: Build Ember Core
      run: |
        make clean
        make BUILD_TYPE=${{ matrix.build_type }} all

    - name: Run core tests
      run: make BUILD_TYPE=${{ matrix.build_type }} check

    - name: Run fuzzing tests (quick)
      if: matrix.build_type == 'debug'
      run: |
        make BUILD_TYPE=${{ matrix.build_type }} fuzz
        timeout 60s ./build/fuzz-comprehensive -n 100 || true
        timeout 30s ./build/fuzz-parser 50 || true
        timeout 30s ./build/fuzz-vm 50 || true

    - name: Test REPL functionality
      run: |
        echo 'print("Hello, Ember Core!")' | ./build/ember
        echo 'let x = 42; print("Answer:", x);' | ./build/ember

    - name: Test compiler functionality  
      run: |
        echo 'print("Compiled test");' > test.ember
        ./build/emberc test.ember -o test.ebc
        file test.ebc

  memory-safety:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libreadline-dev libssl-dev libcurl4-openssl-dev pkg-config valgrind

    - name: Build with AddressSanitizer
      run: |
        make clean
        make BUILD_TYPE=asan all

    - name: Run AddressSanitizer tests
      run: |
        export ASAN_OPTIONS=detect_leaks=1:abort_on_error=1
        make BUILD_TYPE=asan check

    - name: Build for Valgrind
      run: |
        make clean
        make BUILD_TYPE=debug all

    - name: Run Valgrind tests
      run: |
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./build/test-vm
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./build/test-parser-core

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update  
        sudo apt-get install -y build-essential libreadline-dev libssl-dev libcurl4-openssl-dev pkg-config time

    - name: Build optimized release
      run: |
        make clean
        make BUILD_TYPE=release all

    - name: Basic performance test
      run: |
        # Test startup time (should be under 100ms for core tests)
        time ./build/test-minimal
        time ./build/test-simple
        
        # Test REPL startup
        time echo 'print("Performance test")' | ./build/ember

    - name: VM performance test
      run: |
        # Test VM execution performance
        echo 'for (let i = 0; i < 10000; i++) { let x = i * 2; }' | time ./build/ember

  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libreadline-dev libssl-dev libcurl4-openssl-dev pkg-config cppcheck clang clang-tools

    - name: Run static analysis
      run: |
        # Run cppcheck
        cppcheck --enable=all --inconclusive --std=c99 \
          --inline-suppr --suppress=missingIncludeSystem \
          --suppress=unusedFunction --suppress=unmatchedSuppression \
          -I include -I src/core -I src/frontend -I src/runtime \
          --template='{file}:{line}: {severity}: {message} [{id}]' \
          src/ include/ || true

    - name: Build with warnings as errors
      run: |
        CFLAGS="-Werror -Wall -Wextra" make BUILD_TYPE=debug all

  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libreadline-dev libssl-dev libcurl4-openssl-dev pkg-config clang

    - name: Build with ${{ matrix.compiler }}
      run: |
        make clean
        CC=${{ matrix.compiler }} make BUILD_TYPE=release all

    - name: Test with ${{ matrix.compiler }}
      run: |
        CC=${{ matrix.compiler }} make BUILD_TYPE=release check

  minimal-dependencies:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install minimal dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev

    - name: Build without optional dependencies
      run: |
        make clean
        make BUILD_TYPE=release all

    - name: Test core functionality
      run: |
        ./build/test-minimal
        echo 'print("Minimal build test")' | ./build/ember

  integration:
    runs-on: ubuntu-latest
    needs: [test, memory-safety]
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libreadline-dev libssl-dev libcurl4-openssl-dev pkg-config

    - name: Build release
      run: |
        make clean
        make BUILD_TYPE=release all

    - name: Integration test suite
      run: |
        # Test that all core tools work together
        echo 'class Test { constructor() { this.value = 42; } getValue() { return this.value; } }' > integration.ember
        echo 'let t = new Test(); print("Integration test:", t.getValue());' >> integration.ember
        
        # Compile and verify
        ./build/emberc integration.ember -o integration.ebc
        
        # Run original
        ./build/ember integration.ember
        
        # Test REPL functionality
        echo 'let factorial = function(n) { return n <= 1 ? 1 : n * factorial(n-1); }; print("Factorial 5:", factorial(5));' | ./build/ember

    - name: Stress test
      run: |
        # Create a more complex program
        cat > stress_test.ember << 'EOF'
        // Stress test for Ember Core
        
        class Matrix {
            constructor(rows, cols) {
                this.rows = rows;
                this.cols = cols;
                this.data = [];
                for (let i = 0; i < rows * cols; i++) {
                    this.data[i] = 0;
                }
            }
            
            set(row, col, value) {
                this.data[row * this.cols + col] = value;
            }
            
            get(row, col) {
                return this.data[row * this.cols + col];
            }
        }
        
        let m = new Matrix(10, 10);
        for (let i = 0; i < 10; i++) {
            for (let j = 0; j < 10; j++) {
                m.set(i, j, i * j);
            }
        }
        
        let sum = 0;
        for (let i = 0; i < 10; i++) {
            for (let j = 0; j < 10; j++) {
                sum += m.get(i, j);
            }
        }
        
        print("Matrix sum:", sum);
        
        // Test recursion
        function fibonacci(n) {
            if (n <= 1) return n;
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
        
        print("Fibonacci 10:", fibonacci(10));
        
        // Test JSON
        let obj = {"test": true, "value": 123, "array": [1, 2, 3]};
        let json = json_stringify(obj);
        let parsed = json_parse(json);
        print("JSON test:", parsed.value);
        EOF
        
        ./build/ember stress_test.ember

  # Package building jobs - only run on tags (releases)
  package-deb:
    runs-on: ubuntu-latest
    needs: [test, memory-safety, performance, static-analysis]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Install Debian packaging dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y devscripts build-essential dpkg-dev debhelper \
          gcc make libreadline-dev libssl-dev libcurl4-openssl-dev pkg-config

    - name: Build Ember Core
      run: |
        make clean
        make BUILD_TYPE=release all

    - name: Build Debian package
      run: |
        # Build the .deb package
        ./build-deb.sh

    - name: Test Debian package installation
      run: |
        # Test package installation in isolated environment
        sudo dpkg -i ../ember-core_*.deb || true
        sudo apt-get install -f -y
        
        # Verify installation
        ember --version || echo "ember version check failed"
        emberc --help || echo "emberc help check failed"
        
        # Test basic functionality
        echo 'print("Package test successful!")' | ember
        
        # Test compiler
        echo 'print("Compile test");' > test_package.ember
        emberc test_package.ember -o test_package.ebc
        file test_package.ebc

    - name: Upload Debian packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debian-packages
        path: ../ember-core_*.deb
        retention-days: 30

  package-rpm-centos:
    runs-on: ubuntu-latest
    needs: [test, memory-safety, performance, static-analysis]
    if: startsWith(github.ref, 'refs/tags/v')
    container:
      image: centos:8
    steps:
    - name: Install build dependencies
      run: |
        # Update CentOS repositories to use vault.centos.org (CentOS 8 is EOL)
        sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*.repo
        sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*.repo
        
        # Install development tools and dependencies
        yum update -y
        yum groupinstall -y "Development Tools"
        yum install -y git rpm-build rpmdevtools readline-devel libcurl-devel pkgconfig openssl-devel

    - uses: actions/checkout@v4

    - name: Build Ember Core
      run: |
        make clean
        make BUILD_TYPE=release all

    - name: Build RPM package
      run: |
        # Setup RPM build environment
        rpmdev-setuptree
        
        # Build the package using our script
        ./build-rpm.sh

    - name: Test RPM package installation
      run: |
        # Install the built package
        yum localinstall -y ~/rpmbuild/RPMS/*/ember-core-*.rpm
        
        # Verify installation
        ember --version || echo "ember version check failed"
        emberc --help || echo "emberc help check failed"
        
        # Test basic functionality
        echo 'print("RPM package test successful!")' | ember
        
        # Test compiler
        echo 'print("RPM compile test");' > test_rpm_package.ember
        emberc test_rpm_package.ember -o test_rpm_package.ebc
        file test_rpm_package.ebc

    - name: Upload RPM packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: centos-rpm-packages
        path: |
          ~/rpmbuild/RPMS/*/ember-core-*.rpm
          ~/rpmbuild/SRPMS/ember-core-*.src.rpm
        retention-days: 30

  package-rpm-rocky:
    runs-on: ubuntu-latest
    needs: [test, memory-safety, performance, static-analysis]
    if: startsWith(github.ref, 'refs/tags/v')
    container:
      image: rockylinux:8
    steps:
    - name: Install build dependencies
      run: |
        # Install development tools and dependencies
        yum update -y
        yum groupinstall -y "Development Tools"
        yum install -y git rpm-build rpmdevtools readline-devel libcurl-devel pkgconfig openssl-devel

    - uses: actions/checkout@v4

    - name: Build Ember Core
      run: |
        make clean
        make BUILD_TYPE=release all

    - name: Build RPM package
      run: |
        # Setup RPM build environment
        rpmdev-setuptree
        
        # Build the package using our script
        ./build-rpm.sh

    - name: Test RPM package installation
      run: |
        # Install the built package
        yum localinstall -y ~/rpmbuild/RPMS/*/ember-core-*.rpm
        
        # Verify installation
        ember --version || echo "ember version check failed"
        emberc --help || echo "emberc help check failed"
        
        # Test basic functionality
        echo 'print("Rocky Linux package test successful!")' | ember
        
        # Test compiler
        echo 'print("Rocky compile test");' > test_rocky_package.ember
        emberc test_rocky_package.ember -o test_rocky_package.ebc
        file test_rocky_package.ebc

    - name: Upload RPM packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rocky-rpm-packages
        path: |
          ~/rpmbuild/RPMS/*/ember-core-*.rpm
          ~/rpmbuild/SRPMS/ember-core-*.src.rpm
        retention-days: 30

  # Package validation job to ensure cross-platform compatibility
  package-validation:
    runs-on: ubuntu-latest
    needs: [package-deb, package-rpm-centos, package-rpm-rocky]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all package artifacts
      uses: actions/download-artifact@v4
      with:
        path: packages/

    - name: List all built packages
      run: |
        echo "Built packages:"
        find packages/ -name "*.deb" -o -name "*.rpm" | sort
        echo ""
        echo "Package sizes:"
        find packages/ -name "*.deb" -o -name "*.rpm" -exec ls -lh {} \;

    - name: Validate package metadata
      run: |
        echo "=== Debian Package Info ==="
        for deb in packages/debian-packages/*.deb; do
          if [ -f "$deb" ]; then
            echo "Package: $(basename "$deb")"
            dpkg-deb --info "$deb" | grep -E "(Package|Version|Architecture|Depends)"
            echo ""
          fi
        done
        
        echo "=== RPM Package Info ==="
        for rpm in packages/*/ember-core-*.rpm; do
          if [ -f "$rpm" ]; then
            echo "Package: $(basename "$rpm")"
            rpm -qip "$rpm" 2>/dev/null | grep -E "(Name|Version|Release|Architecture|Requires)" || echo "RPM query failed"
            echo ""
          fi
        done

  # Release job to create GitHub release with packages
  release:
    runs-on: ubuntu-latest
    needs: [package-validation]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Download all package artifacts
      uses: actions/download-artifact@v4
      with:
        path: packages/

    - name: Create release notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Creating release for version $VERSION"
        
        # Create release notes
        cat > release_notes.md << EOF
        # Ember Core v$VERSION Release
        
        ## Native Packages
        
        This release includes native packages for multiple Linux distributions:
        
        ### Debian/Ubuntu (.deb packages)
        - Compatible with Debian 10+, Ubuntu 18.04+
        - Install with: \`sudo dpkg -i ember-core_*.deb && sudo apt-get install -f\`
        
        ### RHEL/CentOS/Fedora (.rpm packages)
        - Compatible with RHEL 8+, CentOS 8+, Fedora 30+, Rocky Linux 8+
        - Install with: \`sudo yum localinstall ember-core-*.rpm\`
        
        ## Features
        - High-performance JIT compiler with 5-50x speedup
        - Lock-free VM pool with work-stealing threads
        - NUMA-aware memory allocation
        - Security-hardened runtime with input validation
        - Interactive REPL with readline support
        - Comprehensive error handling and debugging
        
        ## Usage
        After installation:
        - \`ember\` - Start interactive REPL
        - \`emberc file.ember\` - Compile Ember programs
        - \`ember --version\` - Show version information
        
        ## Documentation
        See the [README.md](README.md) for detailed usage instructions and examples.
        EOF

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Ember Core ${{ github.ref_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload packages to release
      run: |
        # Upload Debian packages
        for deb in packages/debian-packages/*.deb; do
          if [ -f "$deb" ]; then
            filename=$(basename "$deb")
            echo "Uploading Debian package: $filename"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/vnd.debian.binary-package" \
              --data-binary @"$deb" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          fi
        done
        
        # Upload CentOS RPM packages
        for rpm in packages/centos-rpm-packages/*.rpm; do
          if [ -f "$rpm" ]; then
            filename="centos-$(basename "$rpm")"
            echo "Uploading CentOS RPM package: $filename"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/x-rpm" \
              --data-binary @"$rpm" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          fi
        done
        
        # Upload Rocky Linux RPM packages
        for rpm in packages/rocky-rpm-packages/*.rpm; do
          if [ -f "$rpm" ]; then
            filename="rocky-$(basename "$rpm")"
            echo "Uploading Rocky Linux RPM package: $filename"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/x-rpm" \
              --data-binary @"$rpm" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          fi
        done