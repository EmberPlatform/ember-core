print("=== Ember Standard Library Comprehensive Test ===")
print("")

// Test crypto functions (using actual registered names)
print("🔐 CRYPTO FUNCTIONS:")
try {
    let hash = sha256("test")
    print("✓ sha256('test') = " + str(hash))
} catch (e) {
    print("✗ sha256() failed: " + str(e))
}

try {
    let hash = sha512("test")  
    print("✓ sha512('test') = " + str(hash))
} catch (e) {
    print("✗ sha512() failed: " + str(e))
}

try {
    let hmac = hmac_sha256("key", "message")
    print("✓ hmac_sha256('key', 'message') = " + str(hmac))
} catch (e) {
    print("✗ hmac_sha256() failed: " + str(e))
}

try {
    let random = secure_random(16)
    print("✓ secure_random(16) = " + str(random))
} catch (e) {
    print("✗ secure_random() failed: " + str(e))
}

try {
    let hash = bcrypt_hash("password", 10)
    print("✓ bcrypt_hash('password', 10) = " + str(hash))
    
    let valid = bcrypt_verify("password", hash)
    print("✓ bcrypt_verify('password', hash) = " + str(valid))
} catch (e) {
    print("✗ bcrypt functions failed: " + str(e))
}

print("")

// Test JSON functions
print("📄 JSON FUNCTIONS:")
try {
    let obj = json_parse("{\"name\":\"Alice\",\"age\":30}")
    print("✓ json_parse() succeeded: " + str(obj))
} catch (e) {
    print("✗ json_parse() failed: " + str(e))
}

try {
    let json_str = json_stringify({"name": "Bob", "age": 25})
    print("✓ json_stringify() = " + str(json_str))
} catch (e) {
    print("✗ json_stringify() failed: " + str(e))
}

try {
    let valid = json_validate("{\"test\":true}")
    print("✓ json_validate() = " + str(valid))
} catch (e) {
    print("✗ json_validate() failed: " + str(e))
}

print("")

// Test file I/O functions
print("📁 FILE I/O FUNCTIONS:")
try {
    let exists = file_exists("/etc/hostname")
    print("✓ file_exists('/etc/hostname') = " + str(exists))
} catch (e) {
    print("✗ file_exists() failed: " + str(e))
}

try {
    // Test writing and reading a file
    write_file("/tmp/ember_test.txt", "Hello from Ember!")
    let content = read_file("/tmp/ember_test.txt")
    print("✓ write_file() and read_file() worked: " + str(content))
} catch (e) {
    print("✗ file I/O functions failed: " + str(e))
}

print("")

// Test math functions  
print("🔢 MATH FUNCTIONS:")
try {
    print("✓ abs(-5) = " + str(abs(-5)))
    print("✓ sqrt(16) = " + str(sqrt(16)))
    print("✓ max(10, 20) = " + str(max(10, 20)))
    print("✓ min(10, 20) = " + str(min(10, 20)))
    print("✓ floor(3.7) = " + str(floor(3.7)))
    print("✓ ceil(3.2) = " + str(ceil(3.2)))
    print("✓ round(3.6) = " + str(round(3.6)))
    print("✓ pow(2, 3) = " + str(pow(2, 3)))
} catch (e) {
    print("✗ math functions failed: " + str(e))
}

print("")

// Test string functions
print("📝 STRING FUNCTIONS:")
try {
    print("✓ len('hello') = " + str(len('hello')))
    print("✓ substr('hello', 1, 3) = " + str(substr('hello', 1, 3)))
    print("✓ starts_with('hello', 'he') = " + str(starts_with('hello', 'he')))
    print("✓ ends_with('hello', 'lo') = " + str(ends_with('hello', 'lo')))
    
    let parts = split("a,b,c", ",")
    print("✓ split('a,b,c', ',') = " + str(parts))
    
    let joined = join(["x", "y", "z"], "-")
    print("✓ join(['x','y','z'], '-') = " + str(joined))
} catch (e) {
    print("✗ string functions failed: " + str(e))
}

print("")

// Test HTTP functions (these may not be available but let's check)
print("🌐 HTTP FUNCTIONS (may not be implemented):")
try {
    let result = http_get("http://httpbin.org/get")
    print("✓ http_get() worked: " + str(result))
} catch (e) {
    print("✗ http_get() not available: " + str(e))
}

try {
    let server = http_create_server()
    print("✓ http_create_server() worked: " + str(server))
} catch (e) {
    print("✗ http_create_server() not available: " + str(e))
}

print("")
print("=== Standard Library Test Complete ===")
print("")
print("Summary:")
print("- Crypto functions: Available (sha256, sha512, hmac_*, bcrypt_*, secure_*)")
print("- JSON functions: Available (json_parse, json_stringify, json_validate)")  
print("- File I/O functions: Available (read_file, write_file, file_exists, etc)")
print("- Math functions: Available (abs, sqrt, max, min, floor, ceil, round, pow)")
print("- String functions: Available (len, substr, split, join, starts_with, ends_with)")
print("- HTTP functions: Need to check implementation status")
print("")
print("NOTE: Import statements like 'import http from \"http\"' are NOT needed.")
print("All stdlib functions are globally available with their registered names.")