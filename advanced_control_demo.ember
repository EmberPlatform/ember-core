// Advanced Control Structures Demonstration
// This demonstrates do-while loops, switch/case statements, and their interactions

print("=== Advanced Control Structures Demo ===")
print()

// Demonstration 1: Menu-driven program using do-while and switch
print("Demo 1: Menu-driven calculator")
print("(Simulated user input)")

menu_choice = 1
calculation_count = 0

do {
    print()
    print("Calculator Menu:")
    print("1. Add")
    print("2. Subtract") 
    print("3. Multiply")
    print("4. Exit")
    
    // Simulate user choices: 1, 2, 3, 4 (exit)
    choices = [1, 2, 3, 4]
    menu_choice = choices[calculation_count]
    print("Choice:", menu_choice)
    
    switch (menu_choice) {
        case 1:
            x = 10
            y = 5
            result = x + y
            print("Adding", x, "+", y, "=", result)
            break
        case 2:
            x = 15
            y = 3
            result = x - y
            print("Subtracting", x, "-", y, "=", result)
            break
        case 3:
            x = 6
            y = 7
            result = x * y
            print("Multiplying", x, "*", y, "=", result)
            break
        case 4:
            print("Exiting calculator")
            break
        default:
            print("Invalid choice, try again")
    }
    
    calculation_count = calculation_count + 1
    
} while (menu_choice != 4 && calculation_count < 10)

print()

// Demonstration 2: Data processing with validation
print("Demo 2: Data processing with validation")

data_items = [5, -2, 0, 8, -1, 3]
item_index = 0
processed_count = 0

do {
    current_item = data_items[item_index]
    print("Processing item", item_index + 1, ":", current_item)
    
    switch (current_item < 0) {
        case true:
            print("  Negative value detected")
            switch (current_item) {
                case -1:
                    print("  Special case: -1 means stop processing")
                    break
                case -2:
                    print("  Special case: -2 means skip")
                    item_index = item_index + 1
                    continue
                default:
                    print("  Other negative value, treating as zero")
                    current_item = 0
            }
            break
        case false:
            if (current_item == 0) {
                print("  Zero value, skipping")
                item_index = item_index + 1
                continue
            }
            print("  Valid positive value:", current_item)
            processed_count = processed_count + 1
            break
    }
    
    if (current_item == -1) {
        print("  Stopping due to -1 value")
        break
    }
    
    item_index = item_index + 1
    
} while (item_index < 6)

print("Processed", processed_count, "valid items")
print()

// Demonstration 3: State machine simulation
print("Demo 3: Simple state machine")

state = "init"
transitions = 0
max_transitions = 8

do {
    transitions = transitions + 1
    print("Transition", transitions, "- Current state:", state)
    
    switch (state) {
        case "init":
            print("  Initializing system...")
            state = "ready"
            break
        case "ready":
            print("  System ready, starting process...")
            state = "processing"
            break
        case "processing":
            print("  Processing data...")
            if (transitions == 4) {
                state = "error"
            } else {
                state = "completed"
            }
            break
        case "completed":
            print("  Process completed successfully")
            state = "cleanup"
            break
        case "error":
            print("  Error occurred, attempting recovery...")
            state = "recovery"
            break
        case "recovery":
            print("  Recovery successful")
            state = "ready"
            break
        case "cleanup":
            print("  Cleaning up resources...")
            state = "shutdown"
            break
        case "shutdown":
            print("  System shutdown")
            break
        default:
            print("  Unknown state!")
            state = "error"
    }
    
    if (state == "shutdown") {
        break
    }
    
} while (transitions < max_transitions)

print()

// Demonstration 4: Game loop simulation
print("Demo 4: Game loop simulation")

game_running = true
player_health = 100
level = 1
turn = 0

do {
    turn = turn + 1
    print()
    print("Turn", turn, "- Level", level, "- Health:", player_health)
    
    // Simulate different events based on turn number
    event_type = turn % 4
    
    switch (event_type) {
        case 0:
            print("  Encounter: Monster!")
            damage = 20
            player_health = player_health - damage
            print("  Took", damage, "damage")
            break
        case 1:
            print("  Found health potion!")
            healing = 15
            player_health = player_health + healing
            if (player_health > 100) {
                player_health = 100
            }
            print("  Healed", healing, "points")
            break
        case 2:
            print("  Level completed!")
            level = level + 1
            print("  Advanced to level", level)
            break
        case 3:
            print("  Safe zone - resting...")
            print("  No events this turn")
            break
    }
    
    // Check game over conditions
    if (player_health <= 0) {
        print("  GAME OVER - Player defeated!")
        game_running = false
        break
    }
    
    if (level > 3) {
        print("  VICTORY - All levels completed!")
        game_running = false
        break
    }
    
} while (game_running && turn < 15)

print()
print("Game ended after", turn, "turns")
print("Final stats - Level:", level, "Health:", player_health)

print()
print("=== Demo Complete ===")
print()
print("Advanced control structures demonstrated:")
print("✓ do-while loops with guaranteed execution")
print("✓ switch/case statements with proper matching")  
print("✓ Fall-through behavior in switch statements")
print("✓ break and continue statements in new structures")
print("✓ Proper nesting and interaction between structures")
print("✓ Complex control flow patterns")